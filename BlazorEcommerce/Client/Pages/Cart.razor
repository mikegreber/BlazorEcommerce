@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if (_cartProducts == null || _cartProducts.Count == 0)
{
    <span>@_message</span>
}
else if (_orderPlaced)
{
    <span>Thank you for your order! You can check your orders <a href="orders">here</a>.</span>
}
else
{
    <div>
        @foreach (var product in _cartProducts)
        {
            <div class="container">
                <div class="img-wrapper">
                    <img src="@product.ImageUrl" class="image"/>
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br/>
                    <input type="number" value="@product.Quantity" @onchange="e => UpdateQuantity(e, product)" class="form-control input-quantity" min="1"/>
                    <button class="btn-delete" @onclick="@(() => RemoveProductFromCart(product.ProductId, product.ProductTypeId))">Remove</button>
                </div>
                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total: (@_cartProducts.Count): $@_cartProducts.Sum(product => product.Price * product.Quantity)
        </div>
    </div>
    <button @onclick="PlaceOrder" class="btn btn-success float-end mt-1">Place Order</button>
}

@code
{
    List<CartProductResponse>? _cartProducts;
    string _message = "Loading cart...";
    bool _orderPlaced;

    protected override async Task OnInitializedAsync()
    {
        _orderPlaced = false;
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        _cartProducts = await CartService.GetCartProducts();
        if (_cartProducts == null || _cartProducts.Count == 0)
        {
            _message = "Your cart is empty.";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
        await CartService.GetCartItemsCount();
        _orderPlaced = true;
    }
}
